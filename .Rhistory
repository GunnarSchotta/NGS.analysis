#unstranded (col 2)
if (exists("unstranded", inherits = F)) {
unstranded <- cbind(unstranded, t[,2])
} else {
unstranded <- t[,c(1,2)]
}
#read1 (col 3)
colnames(t) <- c('geneID', 'unstranded', sample, 'read2')
if (exists("read1", inherits = F)) {
read1 <- cbind(read1, t[,3])
} else {
read1 <- t[,c(1,3)]
}
#read2 (col 4)
colnames(t) <- c('geneID', 'unstranded', 'read1', sample)
if (exists("read2", inherits = F)) {
read2 <- cbind(read2, t[,4])
} else {
read2 <- t[,c(1,4)]
}
}
results_subdir <- "/home/gunnar/cluster/becgsc_019/analysis/ef38_RNAseq_KO56_T253/analysis_genes/results_pipeline"
for (sample in project_samples) {
sample_output_folder <- file.path(results_subdir, sample)
sample_gc_file   <- file.path(sample_output_folder, paste("aligned_",genome,sep=""),
paste(sample,".ReadsPerGene.out.tab",sep=""))
t <- fread(sample_gc_file, header=F,
col.names=c('geneID', sample, 'read1', 'read2'), skip = 4)
#unstranded (col 2)
if (exists("unstranded", inherits = F)) {
unstranded <- cbind(unstranded, t[,2])
} else {
unstranded <- t[,c(1,2)]
}
#read1 (col 3)
colnames(t) <- c('geneID', 'unstranded', sample, 'read2')
if (exists("read1", inherits = F)) {
read1 <- cbind(read1, t[,3])
} else {
read1 <- t[,c(1,3)]
}
#read2 (col 4)
colnames(t) <- c('geneID', 'unstranded', 'read1', sample)
if (exists("read2", inherits = F)) {
read2 <- cbind(read2, t[,4])
} else {
read2 <- t[,c(1,4)]
}
}
for (sample in project_samples) {
sample_output_folder <- file.path(results_subdir, sample)
sample_gc_file   <- file.path(sample_output_folder, paste("aligned_",genome,sep=""),
paste(sample,".ReadsPerGene.out.tab",sep=""))
t <- fread(sample_gc_file, header=F,
col.names=c('geneID', sample, 'read1', 'read2'), skip = 4)
#unstranded (col 2)
if (exists("unstranded", inherits = F)) {
unstranded <- cbind(unstranded, t[,2])
} else {
unstranded <- t[,c(1,2)]
}
#read1 (col 3)
colnames(t) <- c('geneID', 'unstranded', sample, 'read2')
if (exists("read1", inherits = F)) {
read1 <- cbind(read1, t[,3])
} else {
read1 <- t[,c(1,3)]
}
#read2 (col 4)
colnames(t) <- c('geneID', 'unstranded', 'read1', sample)
if (exists("read2", inherits = F)) {
read2 <- cbind(read2, t[,4])
} else {
read2 <- t[,c(1,4)]
}
}
View(read1)
View(read2)
#estimate sense reads which should have more coverage
if (sum(read1[,c(2:ncol(read1))]) > sum(read2[,c(2:ncol(read2))])) {sense <- read1} else {sense <- read2}
View(sense)
sum(read1[,c(2:ncol(read1))])
read1[,c(2:ncol(read1))]
read2[,c(2:ncol(read2))]
read2[,2:4]
sum(read1[,2:ncol(read1)])
sum(read2[,2:ncol(read2)])
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
## Only run examples in interactive R sessions
if (interactive()) {
ui <- fluidPage(
downloadLink("downloadData", "Download")
)
server <- function(input, output) {
# Our dataset
data <- mtcars
output$downloadData <- downloadHandler(
filename = function() {
paste("data-", Sys.Date(), ".csv", sep="")
},
content = function(file) {
write.csv(data, file)
}
)
}
shinyApp(ui, server)
}
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
library(shiny)
library(DESeq2)
library(ggplot2)
library(DT)
library(plotly)
library(shinyjs)
library(shinyFiles)
shinyApp(
ui = fluidPage(
useShinyjs(),
sidebarLayout(
sidebarPanel(
fluidRow(
shinyFilesButton('rds.file', 'Choose RDS File', 'Select RDS File',
multiple = FALSE))))))
shinyApp(
ui = fluidPage(
useShinyjs(),
sidebarLayout(
sidebarPanel(
fluidRow(
shinyFilesButton('rds.file', 'Choose RDS File', 'Select RDS File',
multiple = FALSE))))))
shinyApp(
ui = fluidPage(
useShinyjs(),
sidebarLayout(
sidebarPanel(
fluidRow(
shinyFilesButton('rds.file', 'Choose RDS File', 'Select RDS File',
multiple = FALSE)))))
server = function(input, output, session) {
shinyApp(
ui = fluidPage (
useShinyjs(),
shinyFilesButton('rds.file', 'Choose RDS File', 'Select RDS File', multiple = FALSE))
server = function(input, output, session) {
shinyApp(
ui = fluidPage (
shinyFilesButton('rds.file', 'Choose RDS File', 'Select RDS File', multiple = FALSE)
),
server = function(input, output, session) {
#max upload size
options(shiny.maxRequestSize = 500 * 1024^2)
#RDS File Chooser
shinyFileChoose(input = input, id = 'rds.file', session=session, roots=c(Volume='/'))
}
)
shinyApp(
ui = fluidPage (
sidebarLayout(
sidebarPanel(
fluidRow(
shinyFilesButton('rds.file', 'Choose RDS File', 'Select RDS File', multiple = FALSE)
)
))),
server = function(input, output, session) {
#max upload size
options(shiny.maxRequestSize = 500 * 1024^2)
#RDS File Chooser
shinyFileChoose(input = input, id = 'rds.file', session=session, roots=c(Volume='/'))
}
)
shinyApp(
ui = fluidPage (
sidebarLayout(
mainPanel(
fluidRow(
shinyFilesButton('rds.file', 'Choose RDS File', 'Select RDS File', multiple = FALSE)
)
))),
server = function(input, output, session) {
#max upload size
options(shiny.maxRequestSize = 500 * 1024^2)
#RDS File Chooser
shinyFileChoose(input = input, id = 'rds.file', session=session, roots=c(Volume='/'))
}
)
shinyApp(
ui = fluidPage (
sidebarLayout(
sidebarPanel(
fluidRow(
shinyFilesButton('rds.file', 'Choose RDS File', 'Select RDS File', multiple = FALSE)
)
),
mainPanel()
)),
server = function(input, output, session) {
#max upload size
options(shiny.maxRequestSize = 500 * 1024^2)
#RDS File Chooser
shinyFileChoose(input = input, id = 'rds.file', session=session, roots=c(Volume='/'))
}
)
shinyApp(
ui = fluidPage (
sidebarLayout(
sidebarPanel(
fluidRow(
shinyFilesButton('rds.file', 'Choose RDS File', 'Select RDS File', multiple = FALSE)
)
),
mainPanel()
)),
server = function(input, output, session) {
#max upload size
#options(shiny.maxRequestSize = 500 * 1024^2)
#RDS File Chooser
shinyFileChoose(input = input, id = 'rds.file', session=session)
}
)
shinyApp(
ui = fluidPage (
shinyFilesButton('rds.file', 'Choose RDS File', 'Select RDS File', multiple = FALSE)
),
server = function(input, output, session) {
#max upload size
#options(shiny.maxRequestSize = 500 * 1024^2)
#RDS File Chooser
shinyFileChoose(input = input, id = 'rds.file', session=session)
}
)
shinyApp(
ui = fluidPage (
shinyFilesButton('rds.file', 'Choose RDS File', 'Select RDS File', multiple = FALSE)
),
server = function(input, output, session) {
#max upload size
#options(shiny.maxRequestSize = 500 * 1024^2)
#RDS File Chooser
shinyFileChoose(input = input, id = 'rds.file', session=session)
}
)
shinyApp(
ui = fluidPage (
shinyFilesButton('rds.file', 'Choose RDS File', 'Select RDS File', multiple = FALSE)
),
server = function(input, output, session) {
#max upload size
#options(shiny.maxRequestSize = 500 * 1024^2)
volumes <- getVolumes()()
#RDS File Chooser
shinyFileChoose(input = input, id = 'rds.file', session=session, roots=volumes)
}
)
shinyApp(
ui = fluidPage (
shinyFilesButton('rds.file', 'Choose RDS File', 'Select RDS File', multiple = FALSE)
),
server = function(input, output, session) {
#max upload size
#options(shiny.maxRequestSize = 500 * 1024^2)
volumes <- getVolumes()()
print (volumes)
#RDS File Chooser
shinyFileChoose(input = input, id = 'rds.file', session=session, roots=volumes)
}
)
shinyApp(
ui = fluidPage (
shinyFilesButton('file', 'Choose RDS File', 'Select RDS File', multiple = FALSE)
),
server = function(input, output, session) {
#max upload size
#options(shiny.maxRequestSize = 500 * 1024^2)
volumes <- getVolumes()()
print (volumes)
#RDS File Chooser
shinyFileChoose(input = input, id = 'file', session=session, roots=volumes)
}
)
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
x <- readRDS("cluster/becgsc_016/analysis.previous/ChIPseq.factors.heterochromatin/analysis/summary/ChIPseq.heterochromatin.factors_fc_summary.rds")
View(x)
x
assay(x)
xdf <- assay(x)
xdf <- as.data.frame(assay(x))
View(xdf)
library(pheatmap)
pheatmap(xdf)
pheatmap(log(xdf))
pheatmap(log(xdf+1))
pheatmap(log(xdf+1), kmeans_k = 6)
s <- read.delim("~/cluster/becgsc_016/analysis.previous/ChIPseq.factors.heterochromatin/analysis/summary/ChIPseq.heterochromatin.factors_stats_summary.tsv")
View(s)
s$Mapped_reads
xdf/s$Mapped_reads
xndf <- xdf/s$Mapped_reads
View(xndf)
pheatmap(log(xndf+1), kmeans_k = 6)
xns.df <- xndf[,c(3:7)]-rowMeans(xndf[,c(1:2)])
View(xns.df)
pheatmap(log(xns.df+1), kmeans_k = 6)
pheatmap(xns.df, kmeans_k = 6)
pheatmap(xns.df)
xns.df <- xndf[,c(3:7)]/(rowMeans(xndf[,c(1:2)])+1)
pheatmap(xns.df)
pheatmap(log(xns.df+1)
)
pheatmap(log(xns.df+1), kmeans_k = 6)
pheatmap(log(xns.df+1), kmeans_k = 8)
pheatmap(log(xns.df+1), kmeans_k = 10)
y <- readRDS("cluster/becgsc_016/analysis.previous/ChIPseq.histones.PE/analysis/summary/ChIPseq.H3K9me3.H33.PE_fc_summary.rds")
z <- cbind(x,y)
View(z)
xdf <- as.data.frame(assay(z))
View(xdf)
xdf[grep("IAP", rownmaes(xdf)),]
xdf[grep("IAP", rownames(xdf)),]
t <- read.delim(("~/cluster/becgsc_016/analysis.previous/ChIPseq.histones.PE/analysis/summary/ChIPseq.H3K9me3.H33.PE_stats_summary.tsv"))
View(t)
u <- rbind(s,t)
View(u)
zdf <- as.data.frame(assay(z))
zndf <- zdf/u$Mapped_reads
View(zndf)
iap <- zndf[grep("IAP", rownames(zndf)),]
View(iap)
pheatmap(iap)
pheatmap(log(iap+1)
)
pheatmap(log(iap+1))
pheatmap(log(iap))
iap <- iap/iap$wt26.Input.ChIP.r1
pheatmap(log(iap))
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
sample.list <- as.data.frame(colData(se))
sample.list$contrast <- paste(sample.list$study, sample.list$cell_type, sample.list$target, sample.list$genotype, sep=".")
setProgress(message = "Deseq2 analysis", value = 0.1)
dds <- DESeqDataSetFromMatrix(countData = dt, colData = sample.list, design = ~ contrast)
dds <- dds[ rowMeans(counts(dds)) > 10, ]
head dds
head (dds)
dds <- DESeqDataSetFromMatrix(countData = dt, colData = sample.list, design = ~ contrast)
head(dds)
head(dt)
head(sample.list)
sample.list$contrast <- paste(sample.list$study, sample.list$cell_type, sample.list$target, sample.list$genotype, sep=".")
sample.list <- as.data.frame(colData(se))
sample.list$contrast <- paste(sample.list$study, sample.list$cell_type, sample.list$target, sample.list$genotype, sep=".")
sample.list
contrast
dds <- DESeqDataSetFromMatrix(countData = dt, colData = sample.list, design = ~ contrast)
dds
dds[ rowMeans(counts(dds)) > 10, ]
assay(dds)
assay(dds[ rowMeans(counts(dds)) > 10, ])
dds <- dds[ rowMeans(counts(dds)) > 10, ]
des <- DESeq(dds)
des
assay(des)
vsd <- vst(dds, blind=F)
vsd <- vst(dds, blind=T)
vsd <- vst(dds)
vsd <- vst(des)
varianceStabilizingTransformation(dds)
varianceStabilizingTransformation(dds, blind=F)
vsd <- varianceStabilizingTransformation(dds, blind=F)
mat <- assay(vsd)
assay(vsd) <- mat
p <- plotPCA(vsd, intgroup = "contrast",  returnData = TRUE)
percentVar <- round(100 * attr(p, "percentVar"))
pca <- ggplot(p, aes(x = PC1, y = PC2, color= contrast, label=name)) +
geom_point(size =3) +
geom_text(hjust = -0.2, nudge_y = 0.1, size=4) +
scale_color_manual(values=c("darkorange", "grey30")) +
theme(legend.position = "bottom") +
xlab(paste0("PC1: ", percentVar[1], "% variance")) +
ylab(paste0("PC2: ", percentVar[2], "% variance"))
pca
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
tryCatch({
tryCatch({
tryCatch({
tryCatch({
tryCatch({
vsd
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
vst_success <- TRUE
# Attempt to apply vst, and if it fails, set the flag to FALSE
tryCatch({
vsd <- vst(dds, blind = FALSE)
}, error = function(e) {
warning("vst failed. Applying varianceStabilizingTransformation instead.")
vst_success <<- FALSE
})
vst_success <- FALSE
vst_success <<- FALSE
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
k <- readRDS(file = "/home/gunnar/cluster/becgsc_019/analysis/ef50_ChIP_H3K9me3_KO61/pilot/analysis/summary/ChIP_H3K9me3_Arl14ep_Atf7ip_DKO_fc_summary.rds")
a <- readRDS(file = "/home/gunnar/cluster/becgsc_019/analysis/ef51_ATAC_KO61/pilot/analysis/summary/ATAC_Arl14ep_Atf7ip_DKO_fc_summary.rds")
a
sa <- read.delim(file = "/home/gunnar/cluster/becgsc_019/analysis/ef51_ATAC_KO61/pilot/analysis/summary/ATAC_Arl14ep_Atf7ip_DKO_stats_summary.tsv")
View(sa)
sk <- read.delim(file = "/home/gunnar/cluster/becgsc_019/analysis/ef50_ChIP_H3K9me3_KO61/pilot/analysis/summary/ChIP_H3K9me3_Arl14ep_Atf7ip_DKO_stats_summary.tsv")
aa <- as.data.frame(assay(a))
View(aa)
ka <- as.data.frame(assay(k))
View(ka)
head(aa)
head (sa)
mapped_reads_filtered <- subset(sa, select = Mapped_reads_filtered)$Mapped_reads_filtered
subset(sa, select = Mapped_reads_filtered)
aa.n <- aa / mapped_reads_filtered
View(aa.n)
aa.n <- aa / mapped_reads_filtered * 1000000
library(ggplot2)
qplot(wt26, ko61-26, data=aa.n, geom="dotplot", log="xy")
qplot(wt26, aa.n$ko61-26, geom="dotplot", log="xy")
qplot(aa.n$wt26, aa.n$ko61-26, geom="dotplot", log="xy")
qplot(aa.n$wt26, aa.n$ko61-26,log="xy")
aa.n&mean <- rowMeans(aa.n)
aa.n&mean <- rowMeans(x = as.numeric(aa.n))
head(aa.n)
aa.n&mean <- rowMeans(aa.n)
aa.n$mean <- rowMeans(aa.n)
aa.n$fc <- (aa.n$`ko61-26`+10)/(aa.n$wt26+10)
qplot(mean, fc, data=aa.n)
qplot(mean, fc, data=aa.n, log=x)
qplot(mean, fc, data=aa.n, log="x")
mapped_reads_filtered <- subset(sk, select = Mapped_reads_filtered)$Mapped_reads_filtered
ka.n <- ka / mapped_reads_filtered * 1000000
View(ka.n)
ka.n$mean <- rowMeans(ka.n)
ka.n$fc <- (ka.n$`ko61-26`+10)/(ka.n$wt26+10)
qplot(mean, fc, data=ka.n, log="x")
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
r <- readRDS("cluster/becgsc_016/analysis/H3.3_ChIPseq/H3.3ChIP_wt26-ESvsXEN_Morc3.KO-XEN_3M/analysis/summary/H3.3CHIP_Morc3KO_xn_fc_summary.rds")
rd <- as.data.frame(assay(r))
View(rd)
rs <- colData(r)
rs <- as.data.frame(colData(r))
View(rs)
library(readr)
rs <- read_delim("cluster/becgsc_016/analysis/H3.3_ChIPseq/H3.3ChIP_wt26-ESvsXEN_Morc3.KO-XEN_3M/analysis/summary/H3.3CHIP_Morc3KO_xn_stats_summary.tsv",
delim = "\t", escape_double = FALSE)
View(rs)
rs <- read_delim("cluster/becgsc_016/analysis/H3.3_ChIPseq/H3.3ChIP_wt26-ESvsXEN_Morc3.KO-XEN_3M/analysis/summary/H3.3CHIP_Morc3KO_xn_stats_summary.tsv", delim = "\t", escape_double = FALSE)
rd
rs
library (dplyr)
rd <- (rd / rs$Mapped_reads)*1000000
View(rd)
rd$fc <- (rd$wt26_xn_r1 +100) / (rd$wt26_es_r1 +100)
rd$mean <- rowMeans(rd[,c(1,2)])
qplot(mean, fc, data=rd)
qplot(mean, fc, data=rd, log="x")
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
rd$mfc <- (rd$Morc3_KO_xn_r1 +100) / (rd$wt26_xn_r1 +100)
runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
library(shiny); runApp('cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
library(readxl)
la <- read_excel("1256271tables1.xls")
la_K27ac <- read_excel("1256271tables1.xls", sheet = "H3K27Ac")
setwd("~/cluster/becgsc_001/analysis/Mana/LSK.ATAC/peaks")
la <- read_excel("1256271tables1.xls")
la_K27ac <- read_excel("1256271tables1.xls", sheet = "H3K27Ac")
#generate BED file
colnames(la)[1] <- "peakID"
colnames(la)[c(20:36)] <- c("B","CD4","CD8","CLP","CMP","DC","EryA","EryB","GMP","GN","LT-HSC","MEP","MF","Mono","MPP","NK","ST-HSC")
colnames(la_K27ac)[1] <- "peakID"
colnames(la_K27ac)[c(20:36)] <- c("B","CD4","CD8","CLP","CMP","DC","EryA","EryB","GMP","GN","LT-HSC","MEP","MF","Mono","MPP","NK","ST-HSC")
la.bed <- la[,c("Chr","Start","End","peakID")]
la.up <- read.delim("ATAC.peaks.ko.sig.up.lara-astiaso.intersect.bed", header=FALSE)
x <- la_K27ac[la_K27ac$peakID %in% la.up$V9,]
View(x)
library(pheatmap)
pheatmap(x[,c(20:36)])
pheatmap(log(x[,c(20:36)]+1)
)
runApp('~/cluster/becgsc_001/dev/NGS.analysis/NGS.shiny.app.R')
